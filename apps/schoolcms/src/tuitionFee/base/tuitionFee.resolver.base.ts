/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TuitionFee } from "./TuitionFee";
import { TuitionFeeCountArgs } from "./TuitionFeeCountArgs";
import { TuitionFeeFindManyArgs } from "./TuitionFeeFindManyArgs";
import { TuitionFeeFindUniqueArgs } from "./TuitionFeeFindUniqueArgs";
import { CreateTuitionFeeArgs } from "./CreateTuitionFeeArgs";
import { UpdateTuitionFeeArgs } from "./UpdateTuitionFeeArgs";
import { DeleteTuitionFeeArgs } from "./DeleteTuitionFeeArgs";
import { TuitionFeeService } from "../tuitionFee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TuitionFee)
export class TuitionFeeResolverBase {
  constructor(
    protected readonly service: TuitionFeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "read",
    possession: "any",
  })
  async _tuitionFeesMeta(
    @graphql.Args() args: TuitionFeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TuitionFee])
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "read",
    possession: "any",
  })
  async tuitionFees(
    @graphql.Args() args: TuitionFeeFindManyArgs
  ): Promise<TuitionFee[]> {
    return this.service.tuitionFees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TuitionFee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "read",
    possession: "own",
  })
  async tuitionFee(
    @graphql.Args() args: TuitionFeeFindUniqueArgs
  ): Promise<TuitionFee | null> {
    const result = await this.service.tuitionFee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TuitionFee)
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "create",
    possession: "any",
  })
  async createTuitionFee(
    @graphql.Args() args: CreateTuitionFeeArgs
  ): Promise<TuitionFee> {
    return await this.service.createTuitionFee({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TuitionFee)
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "update",
    possession: "any",
  })
  async updateTuitionFee(
    @graphql.Args() args: UpdateTuitionFeeArgs
  ): Promise<TuitionFee | null> {
    try {
      return await this.service.updateTuitionFee({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TuitionFee)
  @nestAccessControl.UseRoles({
    resource: "TuitionFee",
    action: "delete",
    possession: "any",
  })
  async deleteTuitionFee(
    @graphql.Args() args: DeleteTuitionFeeArgs
  ): Promise<TuitionFee | null> {
    try {
      return await this.service.deleteTuitionFee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
