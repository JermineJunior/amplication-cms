/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Academicyear } from "./Academicyear";
import { AcademicyearCountArgs } from "./AcademicyearCountArgs";
import { AcademicyearFindManyArgs } from "./AcademicyearFindManyArgs";
import { AcademicyearFindUniqueArgs } from "./AcademicyearFindUniqueArgs";
import { CreateAcademicyearArgs } from "./CreateAcademicyearArgs";
import { UpdateAcademicyearArgs } from "./UpdateAcademicyearArgs";
import { DeleteAcademicyearArgs } from "./DeleteAcademicyearArgs";
import { AcademicyearService } from "../academicyear.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Academicyear)
export class AcademicyearResolverBase {
  constructor(
    protected readonly service: AcademicyearService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "read",
    possession: "any",
  })
  async _academicyearsMeta(
    @graphql.Args() args: AcademicyearCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Academicyear])
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "read",
    possession: "any",
  })
  async academicyears(
    @graphql.Args() args: AcademicyearFindManyArgs
  ): Promise<Academicyear[]> {
    return this.service.academicyears(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Academicyear, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "read",
    possession: "own",
  })
  async academicyear(
    @graphql.Args() args: AcademicyearFindUniqueArgs
  ): Promise<Academicyear | null> {
    const result = await this.service.academicyear(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Academicyear)
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "create",
    possession: "any",
  })
  async createAcademicyear(
    @graphql.Args() args: CreateAcademicyearArgs
  ): Promise<Academicyear> {
    return await this.service.createAcademicyear({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Academicyear)
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "update",
    possession: "any",
  })
  async updateAcademicyear(
    @graphql.Args() args: UpdateAcademicyearArgs
  ): Promise<Academicyear | null> {
    try {
      return await this.service.updateAcademicyear({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Academicyear)
  @nestAccessControl.UseRoles({
    resource: "Academicyear",
    action: "delete",
    possession: "any",
  })
  async deleteAcademicyear(
    @graphql.Args() args: DeleteAcademicyearArgs
  ): Promise<Academicyear | null> {
    try {
      return await this.service.deleteAcademicyear(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
