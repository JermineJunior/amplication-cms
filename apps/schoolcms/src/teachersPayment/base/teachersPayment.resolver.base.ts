/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TeachersPayment } from "./TeachersPayment";
import { TeachersPaymentCountArgs } from "./TeachersPaymentCountArgs";
import { TeachersPaymentFindManyArgs } from "./TeachersPaymentFindManyArgs";
import { TeachersPaymentFindUniqueArgs } from "./TeachersPaymentFindUniqueArgs";
import { CreateTeachersPaymentArgs } from "./CreateTeachersPaymentArgs";
import { UpdateTeachersPaymentArgs } from "./UpdateTeachersPaymentArgs";
import { DeleteTeachersPaymentArgs } from "./DeleteTeachersPaymentArgs";
import { TeachersPaymentService } from "../teachersPayment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TeachersPayment)
export class TeachersPaymentResolverBase {
  constructor(
    protected readonly service: TeachersPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "read",
    possession: "any",
  })
  async _teachersPaymentsMeta(
    @graphql.Args() args: TeachersPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TeachersPayment])
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "read",
    possession: "any",
  })
  async teachersPayments(
    @graphql.Args() args: TeachersPaymentFindManyArgs
  ): Promise<TeachersPayment[]> {
    return this.service.teachersPayments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TeachersPayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "read",
    possession: "own",
  })
  async teachersPayment(
    @graphql.Args() args: TeachersPaymentFindUniqueArgs
  ): Promise<TeachersPayment | null> {
    const result = await this.service.teachersPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeachersPayment)
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "create",
    possession: "any",
  })
  async createTeachersPayment(
    @graphql.Args() args: CreateTeachersPaymentArgs
  ): Promise<TeachersPayment> {
    return await this.service.createTeachersPayment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeachersPayment)
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "update",
    possession: "any",
  })
  async updateTeachersPayment(
    @graphql.Args() args: UpdateTeachersPaymentArgs
  ): Promise<TeachersPayment | null> {
    try {
      return await this.service.updateTeachersPayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeachersPayment)
  @nestAccessControl.UseRoles({
    resource: "TeachersPayment",
    action: "delete",
    possession: "any",
  })
  async deleteTeachersPayment(
    @graphql.Args() args: DeleteTeachersPaymentArgs
  ): Promise<TeachersPayment | null> {
    try {
      return await this.service.deleteTeachersPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
