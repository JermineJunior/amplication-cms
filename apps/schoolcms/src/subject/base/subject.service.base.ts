/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Subject } from "@prisma/client";

export class SubjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SubjectCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectCountArgs>
  ): Promise<number> {
    return this.prisma.subject.count(args);
  }

  async subjects<T extends Prisma.SubjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectFindManyArgs>
  ): Promise<Subject[]> {
    return this.prisma.subject.findMany(args);
  }
  async subject<T extends Prisma.SubjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectFindUniqueArgs>
  ): Promise<Subject | null> {
    return this.prisma.subject.findUnique(args);
  }
  async createSubject<T extends Prisma.SubjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectCreateArgs>
  ): Promise<Subject> {
    return this.prisma.subject.create<T>(args);
  }
  async updateSubject<T extends Prisma.SubjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectUpdateArgs>
  ): Promise<Subject> {
    return this.prisma.subject.update<T>(args);
  }
  async deleteSubject<T extends Prisma.SubjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubjectDeleteArgs>
  ): Promise<Subject> {
    return this.prisma.subject.delete(args);
  }
}
