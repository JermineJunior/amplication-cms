/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PersonalAccessToken } from "./PersonalAccessToken";
import { PersonalAccessTokenCountArgs } from "./PersonalAccessTokenCountArgs";
import { PersonalAccessTokenFindManyArgs } from "./PersonalAccessTokenFindManyArgs";
import { PersonalAccessTokenFindUniqueArgs } from "./PersonalAccessTokenFindUniqueArgs";
import { CreatePersonalAccessTokenArgs } from "./CreatePersonalAccessTokenArgs";
import { UpdatePersonalAccessTokenArgs } from "./UpdatePersonalAccessTokenArgs";
import { DeletePersonalAccessTokenArgs } from "./DeletePersonalAccessTokenArgs";
import { PersonalAccessTokenService } from "../personalAccessToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PersonalAccessToken)
export class PersonalAccessTokenResolverBase {
  constructor(
    protected readonly service: PersonalAccessTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "read",
    possession: "any",
  })
  async _personalAccessTokensMeta(
    @graphql.Args() args: PersonalAccessTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PersonalAccessToken])
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "read",
    possession: "any",
  })
  async personalAccessTokens(
    @graphql.Args() args: PersonalAccessTokenFindManyArgs
  ): Promise<PersonalAccessToken[]> {
    return this.service.personalAccessTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PersonalAccessToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "read",
    possession: "own",
  })
  async personalAccessToken(
    @graphql.Args() args: PersonalAccessTokenFindUniqueArgs
  ): Promise<PersonalAccessToken | null> {
    const result = await this.service.personalAccessToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalAccessToken)
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "create",
    possession: "any",
  })
  async createPersonalAccessToken(
    @graphql.Args() args: CreatePersonalAccessTokenArgs
  ): Promise<PersonalAccessToken> {
    return await this.service.createPersonalAccessToken({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalAccessToken)
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "update",
    possession: "any",
  })
  async updatePersonalAccessToken(
    @graphql.Args() args: UpdatePersonalAccessTokenArgs
  ): Promise<PersonalAccessToken | null> {
    try {
      return await this.service.updatePersonalAccessToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PersonalAccessToken)
  @nestAccessControl.UseRoles({
    resource: "PersonalAccessToken",
    action: "delete",
    possession: "any",
  })
  async deletePersonalAccessToken(
    @graphql.Args() args: DeletePersonalAccessTokenArgs
  ): Promise<PersonalAccessToken | null> {
    try {
      return await this.service.deletePersonalAccessToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
