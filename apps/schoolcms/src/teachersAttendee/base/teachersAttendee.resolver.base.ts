/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TeachersAttendee } from "./TeachersAttendee";
import { TeachersAttendeeCountArgs } from "./TeachersAttendeeCountArgs";
import { TeachersAttendeeFindManyArgs } from "./TeachersAttendeeFindManyArgs";
import { TeachersAttendeeFindUniqueArgs } from "./TeachersAttendeeFindUniqueArgs";
import { CreateTeachersAttendeeArgs } from "./CreateTeachersAttendeeArgs";
import { UpdateTeachersAttendeeArgs } from "./UpdateTeachersAttendeeArgs";
import { DeleteTeachersAttendeeArgs } from "./DeleteTeachersAttendeeArgs";
import { TeachersAttendeeService } from "../teachersAttendee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TeachersAttendee)
export class TeachersAttendeeResolverBase {
  constructor(
    protected readonly service: TeachersAttendeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "read",
    possession: "any",
  })
  async _teachersAttendeesMeta(
    @graphql.Args() args: TeachersAttendeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TeachersAttendee])
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "read",
    possession: "any",
  })
  async teachersAttendees(
    @graphql.Args() args: TeachersAttendeeFindManyArgs
  ): Promise<TeachersAttendee[]> {
    return this.service.teachersAttendees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TeachersAttendee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "read",
    possession: "own",
  })
  async teachersAttendee(
    @graphql.Args() args: TeachersAttendeeFindUniqueArgs
  ): Promise<TeachersAttendee | null> {
    const result = await this.service.teachersAttendee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeachersAttendee)
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "create",
    possession: "any",
  })
  async createTeachersAttendee(
    @graphql.Args() args: CreateTeachersAttendeeArgs
  ): Promise<TeachersAttendee> {
    return await this.service.createTeachersAttendee({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeachersAttendee)
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "update",
    possession: "any",
  })
  async updateTeachersAttendee(
    @graphql.Args() args: UpdateTeachersAttendeeArgs
  ): Promise<TeachersAttendee | null> {
    try {
      return await this.service.updateTeachersAttendee({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeachersAttendee)
  @nestAccessControl.UseRoles({
    resource: "TeachersAttendee",
    action: "delete",
    possession: "any",
  })
  async deleteTeachersAttendee(
    @graphql.Args() args: DeleteTeachersAttendeeArgs
  ): Promise<TeachersAttendee | null> {
    try {
      return await this.service.deleteTeachersAttendee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
