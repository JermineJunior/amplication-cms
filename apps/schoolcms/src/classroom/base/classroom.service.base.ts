/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Classroom } from "@prisma/client";

export class ClassroomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ClassroomCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomCountArgs>
  ): Promise<number> {
    return this.prisma.classroom.count(args);
  }

  async classrooms<T extends Prisma.ClassroomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomFindManyArgs>
  ): Promise<Classroom[]> {
    return this.prisma.classroom.findMany(args);
  }
  async classroom<T extends Prisma.ClassroomFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomFindUniqueArgs>
  ): Promise<Classroom | null> {
    return this.prisma.classroom.findUnique(args);
  }
  async createClassroom<T extends Prisma.ClassroomCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomCreateArgs>
  ): Promise<Classroom> {
    return this.prisma.classroom.create<T>(args);
  }
  async updateClassroom<T extends Prisma.ClassroomUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomUpdateArgs>
  ): Promise<Classroom> {
    return this.prisma.classroom.update<T>(args);
  }
  async deleteClassroom<T extends Prisma.ClassroomDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassroomDeleteArgs>
  ): Promise<Classroom> {
    return this.prisma.classroom.delete(args);
  }
}
