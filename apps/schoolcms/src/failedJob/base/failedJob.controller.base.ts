/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FailedJobService } from "../failedJob.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FailedJobCreateInput } from "./FailedJobCreateInput";
import { FailedJob } from "./FailedJob";
import { FailedJobFindManyArgs } from "./FailedJobFindManyArgs";
import { FailedJobWhereUniqueInput } from "./FailedJobWhereUniqueInput";
import { FailedJobUpdateInput } from "./FailedJobUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FailedJobControllerBase {
  constructor(
    protected readonly service: FailedJobService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FailedJob })
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFailedJob(
    @common.Body() data: FailedJobCreateInput
  ): Promise<FailedJob> {
    return await this.service.createFailedJob({
      data: data,
      select: {
        connection: true,
        exception: true,
        failedAt: true,
        id: true,
        payload: true,
        queue: true,
        uuid: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FailedJob] })
  @ApiNestedQuery(FailedJobFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failedJobs(@common.Req() request: Request): Promise<FailedJob[]> {
    const args = plainToClass(FailedJobFindManyArgs, request.query);
    return this.service.failedJobs({
      ...args,
      select: {
        connection: true,
        exception: true,
        failedAt: true,
        id: true,
        payload: true,
        queue: true,
        uuid: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FailedJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failedJob(
    @common.Param() params: FailedJobWhereUniqueInput
  ): Promise<FailedJob | null> {
    const result = await this.service.failedJob({
      where: params,
      select: {
        connection: true,
        exception: true,
        failedAt: true,
        id: true,
        payload: true,
        queue: true,
        uuid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FailedJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFailedJob(
    @common.Param() params: FailedJobWhereUniqueInput,
    @common.Body() data: FailedJobUpdateInput
  ): Promise<FailedJob | null> {
    try {
      return await this.service.updateFailedJob({
        where: params,
        data: data,
        select: {
          connection: true,
          exception: true,
          failedAt: true,
          id: true,
          payload: true,
          queue: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FailedJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFailedJob(
    @common.Param() params: FailedJobWhereUniqueInput
  ): Promise<FailedJob | null> {
    try {
      return await this.service.deleteFailedJob({
        where: params,
        select: {
          connection: true,
          exception: true,
          failedAt: true,
          id: true,
          payload: true,
          queue: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
