/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FailedJob } from "./FailedJob";
import { FailedJobCountArgs } from "./FailedJobCountArgs";
import { FailedJobFindManyArgs } from "./FailedJobFindManyArgs";
import { FailedJobFindUniqueArgs } from "./FailedJobFindUniqueArgs";
import { CreateFailedJobArgs } from "./CreateFailedJobArgs";
import { UpdateFailedJobArgs } from "./UpdateFailedJobArgs";
import { DeleteFailedJobArgs } from "./DeleteFailedJobArgs";
import { FailedJobService } from "../failedJob.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FailedJob)
export class FailedJobResolverBase {
  constructor(
    protected readonly service: FailedJobService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "read",
    possession: "any",
  })
  async _failedJobsMeta(
    @graphql.Args() args: FailedJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FailedJob])
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "read",
    possession: "any",
  })
  async failedJobs(
    @graphql.Args() args: FailedJobFindManyArgs
  ): Promise<FailedJob[]> {
    return this.service.failedJobs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FailedJob, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "read",
    possession: "own",
  })
  async failedJob(
    @graphql.Args() args: FailedJobFindUniqueArgs
  ): Promise<FailedJob | null> {
    const result = await this.service.failedJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailedJob)
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "create",
    possession: "any",
  })
  async createFailedJob(
    @graphql.Args() args: CreateFailedJobArgs
  ): Promise<FailedJob> {
    return await this.service.createFailedJob({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailedJob)
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "update",
    possession: "any",
  })
  async updateFailedJob(
    @graphql.Args() args: UpdateFailedJobArgs
  ): Promise<FailedJob | null> {
    try {
      return await this.service.updateFailedJob({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailedJob)
  @nestAccessControl.UseRoles({
    resource: "FailedJob",
    action: "delete",
    possession: "any",
  })
  async deleteFailedJob(
    @graphql.Args() args: DeleteFailedJobArgs
  ): Promise<FailedJob | null> {
    try {
      return await this.service.deleteFailedJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
